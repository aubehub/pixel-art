{"version":3,"sources":["Palette_grid.js","App.js","serviceWorker.js","index.js"],"names":["PaletteGrid","props","setPenColor","bind","setPixelColor","newColor","this","updatePenColor","x","y","updatePixelColor","rows","pixel","backgroundColor","grid","push","className","key","style","background","onClick","id","React","Component","App","state","color","setState","newGrid","resetFunction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAGaA,G,KAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAJJ,EADrB,wDAQcE,GACVC,KAAKL,MAAMM,eAAeF,KAT9B,oCAYgBG,EAAEC,GACdH,KAAKL,MAAMS,iBAAiBF,EAAEC,KAblC,+BAmBI,IAHQ,IAAD,OAEDE,EAAO,GAFN,WAGEF,GAEP,IADA,IAAMG,EAAQ,GAJT,WAKIJ,GACP,IAAMK,EAAkB,EAAKZ,MAAMa,KAAKN,IACrC,EAAKP,MAAMa,KAAKN,GAAGC,GAAK,EAAKR,MAAMa,KAAKN,GAAGC,GAAW,GACzDG,EAAMG,KACJ,yBAAKC,UAAU,QAAQC,IAAKT,EAAGU,MAAO,CAACC,WAAYN,GAAkBO,QAAS,kBAAM,EAAKhB,cAAcI,EAAEC,QAJpGD,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAQTG,EAAKI,KAAK,yBAAKC,UAAU,MAAMC,IAAKR,GACjCG,KAXIH,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAeT,OACE,yBAAKO,UAAU,qBACb,yBAAKK,GAAG,WACN,yBAAKL,UAAU,MAAMK,GAAG,SAASD,QAAS,kBAAM,EAAKlB,YAAY,wBACjE,yBAAKc,UAAU,MAAMK,GAAG,QAAQD,QAAS,kBAAM,EAAKlB,YAAY,YAChE,yBAAKc,UAAU,MAAMK,GAAG,SAASD,QAAS,kBAAM,EAAKlB,YAAY,aACjE,yBAAKc,UAAU,MAAMK,GAAG,MAAMD,QAAS,kBAAM,EAAKlB,YAAY,UAC9D,yBAAKc,UAAU,MAAMK,GAAG,QAAQD,QAAS,kBAAM,EAAKlB,YAAY,uBAChE,yBAAKc,UAAU,MAAMK,GAAG,QAAQD,QAAS,kBAAM,EAAKlB,YAAY,aAGlE,yBAAKmB,GAAG,OACLV,QA9CX,GAAiCW,IAAMC,YCuDxBC,E,kDArDb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAQ,CACXC,MAAO,GACPZ,KAAM,IAER,EAAKP,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKO,iBAAmB,EAAKA,iBAAiBP,KAAtB,gBAPR,E,2DAWHE,GACbC,KAAKqB,SAAS,CACZD,MAAOrB,M,uCAIMG,EAAGC,GAClB,IAAMmB,EAAUtB,KAAKmB,MAAMX,KACtBc,EAAQpB,KACXoB,EAAQpB,GAAK,IAEfoB,EAAQpB,GAAGC,GAAKH,KAAKmB,MAAMC,MAC3BpB,KAAKqB,SAASC,K,sCAIdtB,KAAKqB,SAAS,CACZD,MAAO,GACPZ,KAAK,O,+BAIC,IAAD,OACP,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,yCACA,sFAGF,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAaN,iBAAkBJ,KAAKI,iBACtBH,eAAgBD,KAAKC,eACrBO,KAAMR,KAAKmB,MAAMX,QAGjC,4BAAQE,UAAU,QAAQI,QAAS,kBAAM,EAAKS,kBAA9C,c,GAhDUP,IAAMC,WCQJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9a9b12f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport class PaletteGrid extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.setPenColor = this.setPenColor.bind(this);\n    this.setPixelColor = this.setPixelColor.bind(this);\n  }\n\n  setPenColor(newColor){\n    this.props.updatePenColor(newColor)\n  }\n\n  setPixelColor(x,y){\n    this.props.updatePixelColor(x,y)\n  }\n\n  render() {\n\n    const rows = []\n    for (let y = 0; y < 10; y++) {\n      const pixel = []\n      for (let x = 0; x < 10; x++) {\n        const backgroundColor = this.props.grid[x] ? \n          (this.props.grid[x][y] ? this.props.grid[x][y] : '') : '';\n        pixel.push(\n          <div className=\"pixel\" key={x} style={{background: backgroundColor}} onClick={() => this.setPixelColor(x,y)}>\n          </div>\n        )\n      }\n      rows.push(<div className=\"row\" key={y}>\n        {pixel}\n      </div>)\n    }\n\n    return (\n      <div className=\"wrap-palette_grid\">\n        <div id=\"palette\">\n          <div className=\"pen\" id=\"purple\" onClick={() => this.setPenColor('rgb(206, 95, 206)')}></div>\n          <div className=\"pen\" id=\"black\" onClick={() => this.setPenColor('black')}></div>\n          <div className=\"pen\" id=\"yellow\" onClick={() => this.setPenColor('yellow')}></div>\n          <div className=\"pen\" id=\"red\" onClick={() => this.setPenColor('red')}></div>\n          <div className=\"pen\" id=\"green\" onClick={() => this.setPenColor('rgb(53, 175, 53)')}></div>\n          <div className=\"pen\" id=\"brown\" onClick={() => this.setPenColor('brown')}></div>\n        </div>\n\n        <div id=\"art\">\n          {rows}\n        </div>\n\n      </div>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { PaletteGrid } from './Palette_grid';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      color: '',\n      grid: [],\n    }\n    this.updatePenColor = this.updatePenColor.bind(this);\n    this.updatePixelColor = this.updatePixelColor.bind(this)\n  }\n\n\n  updatePenColor(newColor){\n    this.setState({\n      color: newColor\n    })\n  }\n\n  updatePixelColor(x, y) {\n    const newGrid = this.state.grid;\n    if (!newGrid[x]) {\n      newGrid[x] = [];\n    }\n    newGrid[x][y] = this.state.color;\n    this.setState(newGrid);\n  }\n\n  resetFunction(){\n    this.setState({\n      color: '',\n      grid:[]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Pixel Art</h1>\n          <p>Choose your color in the palet and start creating art!</p>\n        </header>\n\n        <div className=\"palette_board-div\">\n          <PaletteGrid updatePixelColor={this.updatePixelColor}\n                        updatePenColor={this.updatePenColor}\n                        grid={this.state.grid}\n          />\n        </div>\n        <button className=\"reset\" onClick={() => this.resetFunction()}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}